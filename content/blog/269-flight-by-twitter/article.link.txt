Title: Flight By @twitter

----

Link: http://twitter.github.com/flight/

----

Date: 2/1/2013

----

Text:

On the Flight landingpage Twitter offers up the reasoning behind their framework:

> Flight is distinct from existing frameworks in that it doesn't prescribe or provide any particular approach to rendering or providing data to a web application. It's agnostic to how requests are routed, which templating language you use or even if you render your HTML on the client or the server. While some web frameworks encourage developers to arrange their code around a prescribed model layer, Flight is organized around the existing DOM model with functionality mapped directly to DOM nodes.
>
> Not only does this obviate the need for additional data structures that will inevitably influence the broader architecture, but by mapping our functionality directly onto the native web we get to take advantage of native features. For example, we get custom event propagation for free by piggy-backing off DOM event bubbling, and our event handling infrastructure works equally well with both native and custom events.

Given the JavaScript chops at Twitter I think it's worth checking out.

More interesting quotes:

Strict separation of concerns:

> Flight enforces strict separation of concerns. When you create a component you don't get a handle to it. Consequently, components cannot be referenced by other components and cannot become properties of the global object tree.

Usage of native events:

> By making DOM node events proxies for component events, we let the web work for us:
>
> * we get event propagation for free
> * a component can subscribe to a given event type at the document level or it can choose to listen only those events originating from within a specified DOM Node
> * subscribing components do not distinguish between custom events from other components (e.g. dataMailItemsServed) and native DOM node events (e.g. click), and process both types of event in an identical fashion

Easy testing:

> Each component is a module, which aside from a minimal set of standard dependencies (relevant Flight utilities and mixins), has no reference to the outside world. Thus a given component will respond to a given event in the same way, regardless of environment.> This makes testing both simple and reliable â€” events are essentially the only variable and a production event is easy to replicate in testing. You can even debug a component by triggering events in the console.

Mixins:

> A mixin defines a set of functionality that is useful to more than one object. Flight comes with built-in support for functional mixins, including protection against unintentional overrides and duplicate mixins.