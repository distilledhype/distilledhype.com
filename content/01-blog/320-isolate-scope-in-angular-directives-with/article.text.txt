Title: Angular Directives: What's The Deal with "&"?

----

Date: 03/31/2014

----

Draft: true

----

Text:

With a little help from Egghead and the Angular docs, I learned about a sweet little pattern for directives, which I believe should be quite handy in many cases.

## Isolate Scope

Isolate scope comes in tremendously handy when you are building a directive that you want to be "ng-repeat-able". When you use a directive that has an isolated scope within an ng-repeat loop every instance of the directive has it's own scope. If you don't isolate the scope the scope will be identical for all instances of that directive and any change in that scope will reflect in every instance of that directive. They all have the same scope.

You can isolate scope for each instance of the directive by setting `scope: {}` in the directive definition object:

```javascript
angular.module(...);

myModule.directive('directiveName', function factory(injectables) {
  var directiveDefinitionObject = {
    scope: {}
    link: function postLink(scope, iElement, iAttrs) {
      // Do something with scope. The scope will be isolated and individual for
      // each instace of this directive.
    }
  };
  return directiveDefinitionObject;
});
```
This is great because when a user interacts with one instance of the directive, only the state of that specific instance changes. You can see this in action in John Lindquists ["Understanding Isolate Scope" screencast](https://egghead.io/lessons/angularjs-understanding-isolate-scope).

## "&"

Isolate scope is great but you might want to take an attribute that you passed to the directive dynamically in the ng-repeat-loop and pass that attribute to a function in the parent scope that can be used by all instances of the directive.

This is where the trusty ampersand-operater comes in. And here is how you use it:

Let's say we are creating a list of buttons that represent different options for an interface and we have one directive that gets ng-repeated and every instance  receives some data from the ng-repeat loop:

```html
<div ng-repeat="button in buttons">
  <!-- This is my custom button directive -->
  <div my-custom-buttons button-data="button"></div>
</div>
```
